import { 
    IUserDocument, 
    IUserModel, 
    EncriptPassword, 
    MatchPassword, 
    SayHelloWorld, 
    GetMessage, 
    VerifyIfUserExists 
} from "../../models/security/users.model";
import { model, Schema, SchemaDefinition, SchemaOptions, CallbackError } from "mongoose";

const options: SchemaOptions = {
    // timestamps: { //Custom properties names for timestamps generated by mongo
    //     createdAt: 'CreatedAt',
    //     updatedAt: 'UpdatedAt'
    // }
    timestamps: true
};

const UserSchemaDefinition: SchemaDefinition<IUserDocument> = {
    userName: {
        type: String,
        unique: true, 
        trim: true,
        required: true
    },
    email: {
        type: String,
        required: true,
        lowercase: true,
        trim: true,
        unique: true,
        match: /.+\@.+\..+/
    },
    password: {
        type: String,
        required: true
    },
    deleted: {
        type: Boolean,
        required: true,
        default: false
    }
}

const UserSchema: Schema<IUserDocument, IUserModel> = new Schema<IUserDocument, IUserModel>(UserSchemaDefinition, options);
// Add our custom methods...
// There are two ways to add our custom methods...
UserSchema.methods.MatchPassword = MatchPassword;
UserSchema.method('GetMessage', GetMessage);
// Define static methods...
UserSchema.statics.SayHelloWorld = SayHelloWorld;
UserSchema.static('VerifyIfUserExists', VerifyIfUserExists);

// Middlewares...
// Encript the user's password before save the user...
UserSchema.pre<IUserDocument>("save", 
    async function(this: IUserDocument, next: (err?: CallbackError | undefined) => void){
        const user: IUserDocument = this;
        if(!user.isModified("password")) return next();
        user.password = await EncriptPassword(user.password);
        next();
    }
);

export default model<IUserDocument, IUserModel>("Users", UserSchema);